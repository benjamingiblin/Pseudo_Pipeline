# Parameter file for input to GPR_Emulator_Tool.py

# --------------------------------------------------------------------- TRAINING SET ------------------------------------------------------------------------------

NumNodes = 50																			# No. of nodes in training set

TrainFile = ../PseudoEmulator/Training_Set/Predictions/z0.000/LogRatio_Seed1Mx1.0_CPFinal_BFMixed-DataUltimate_IDXXXXof50.dat
						# General Filename of training set predictions 
						# with 'XXXX' replacing the ID of the separate predictions


TrainIDs = range(0,50)				# ID numbers to replace 'XXXX'. 
						# If IDs are not numbers, or not sequential, put list here.
						# e.g. ['a','b','c'], [1,3,5,7,9,11,...]

TrainNodesFile = ../PseudoEmulator/Training_Set/Nodes/Seed1Mx1.0_CPFinal_BFMixed-DataUltimate_Nodes50_Dim13_Scaled.dat
						# File for coords (nodes) of the training set in the NDim -dimensional parameter space.
						# Assumes each row is different node, columns are the different dimensions

TrainNodeCols = 
						# [OPTIONAL]: If specified, will only use certain columns of NodesFile. Else will use all.
						# Cols input should be of form [0,1,2] (for example)

Train_Error = False
						# If True, will read in errors (see variables defined below this)
						# If False, will assume ~0 error on training set

Cov_Error = False
						# If you have covariance matri(x/ces) fior the error on Training Set, set this to True

TrainErrFile = 
						# The address of the file describing error on training set.
						# If CoV_Error is True then this file should be a matrix. 
						# If False, it is assumed to be a file containing [x_values, standard_deviations] (2 columns)


						# If the error varies for each node of Training set, this file should have 'XXXX'
						# in the name, in lieu of the ID the error corresponds to, just like TrainFile variable.

alpha = None					# Noise term. Const value added to diagonal of kernel in Scikit-learn. 
						# If set, this is used INSTEAD of errors in TrainErrFile

Scale_Nodes = False				# Scale the training nodes to be in range [0,1]. 
						# If True it will scale Trial Nodes by the range of the Training Nodes.



# --------------------------------------------------------------------- TRAINING SET ------------------------------------------------------------------------------


# --------------------------------------------------------------------- TRIAL SET ------------------------------------------------------------------------------
Run_Trial = True				# Make predictions for a Trial set (True/False)

TrialFile = ../PseudoEmulator/Trial_Set/Predictions/z0.000/LogRatio_Seed2Mx1.0_CPFinal_BFMixed-DataUltimate12.5_IDXXXXof200.dat
						# General Filename for the prediction you want to test accuracy of emulator against
						# IF >1 trial predictions, put 'XXXX' replacing ID of prediction in TrialFile
						# and specify IDs with TrialIDs variable

TrialIDs = range(200)
#['F4_mnu0p00_shape','F4_mnu0p4_w_shape','F5_mnu0p00_shape',
#'F5_mnu0p2_w_shape','F6_mnu0p00_shape','F6_mnu0p1_w_shape',
#'GR_mnu0p05_w_shape','GR_mnu0p05_xcosmo_w_shape','GR_mnu0p1_w_shape',
#'GR_mnu0p1_xcosmo_w_shape','GR_mnu0p2_w_shape','GR_mnu0p2_xcosmo_w_shape',
#'GR_mnu0p4_w_shape','GR_mnu0p4_xcosmo_w_shape']
						# [OPTIONAL]: No need to specify if only testing one Trial prediction
						# else, e.g. range(start,end), ['X','Y','Z'], [2,4,6,8,10,...]

TrialNodesFile = /home/btrotter/PseudoEmulator/Trial_Set/Nodes/Seed2Mx1.0_CPFinal_BFMixed-DataUltimate12.5_Nodes200_Dim13_Scaled.dat
						# Nodes of trail cosmologies: assumes each row a different node.

TrialNodeCols = 

savedirectory = ../PseudoEmulator/Emulator_Predictions/

# --------------------------------------------------------------------- TRIAL SET ------------------------------------------------------------------------------



# --------------------------------------------------------------------- PCA ------------------------------------------------------------------------------
Perform_PCA = True
						# Perform a PCA on the training set and emulate for weights of basis functions
						# rather than the statistic itself.
n_components = 16				# No. of basis functions to use if Perform_PCA is True	
	
BFsFile = 					# [OPTIONAL]: If specified, PCA will use basis functions saved in this file,
						# instead of calculating them from the Training set.
						# Assumes each row of this file is different basis function. Num. rows defines n_componets.

BFDataMean = 					# [OPTIONAL]: Filename. If providing Basis Functions, you must also provide the mean (in each bin)
						# Of the data from which the basis functions were identified. 
						# Assumes input file is formatted [bin_values, Mean] as columns

# --------------------------------------------------------------------- PCA ------------------------------------------------------------------------------





# ------------------------------------------------------------------------------ Extra choices ------------------------------------------------------------------------------
Include_x = False
						# If True, the x-coord corresponding to the statistic being emulated is used 
						# as an extra dimension in the emulator. This means each x-coord will be treated
						# as a different training set node, and the training set
						# will increase in size by a factor len(x)
						# If Perform_PCA is True, then x in this case is the basis function index [0,n_componets]
																						

MCMC_HPs = False				# If True, an MCMC will be ran to infer the best choice of hyperparameters in the emulation
						# These will likely change with the training set, dimensionality, and statistic one is predicting

Cross_Val = False				# Perform "Leave-one-out" cross-validation to test performance of accuracy of emulator

# ------------------------------------------------------------------------------ Extra choices ------------------------------------------------------------------------------






# --------------------------------------------------------------------- GPR ------------------------------------------------------------------------------
n_restarts_optimizer = 100			# [OPTIONAL]: If set to None then emulator won't train and will just use HPs for
						# kernel hyperparameters. Else if a number, it's the number of times Scikit-Learn
						# restarts optimisation for HPs. 20 is a safe estimate I've found.


HPs = [5.7121,1.96,13.8,3.31,4.1,3.17,0.454,0.234,0.376,0.163,0.224,0.165,0.144,0.181] #,2930,17700]
		
						# [OPTIONAL]: If good values of hyperparameters for kernel used in emulator are known,
						# specify them here: [a,b,c,..]: dimensionality must match dimensionality of training set + 1.
						# The '+1' is for the amplitude of the kernel which must appear in position 0 in array.
						# LEAVE NO WHITE SPACE BETWEEN '[' and ']'	



NDim = 13					# [OPTIONAL]: Dimensionality of Training set nodes.
						# If HPs is not set, it will read in this value to know how many dimensions
						# It should emulate in



# --------------------------------------------------------------------- GPR ------------------------------------------------------------------------------





